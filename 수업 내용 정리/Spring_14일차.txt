4/19일 Spring 수업 정리

<< AOP란? (https://velog.io/@rosa/Spring%EC%97%90%EC%84%9C-AOP%EB%9E%80)

- Aspect Oriented Programming : 관점 지향 프로그래밍의 약자

- 기존의 OOP에서 기능별로 class를 분리했음에도 불구하고, 여전히 로그, 트랜잭션,
  자원 해제, 성능테스트 메서드처럼 공통적으로 반복되는 중복코드가 여전히 발생하는 단점을 해결하고자 나온 방식

- 개발코드에서는 비지니스 로직에 집중하고, 실행 시에 비즈니스 로직 앞, 뒤 원하는 지점에 
  해당 공통 관심사를 수행할 수 있게 함으로써 중복 코드를 줄일 수 있는 방식



<< AOP 흐름도

1. aspect에 횡단관심사 모듈로 등록
2. 관심 메서드 등록
3. 1,2 연결


- before : 관심메서드 실행 전에 삽입
- after : 관심메서드 실행 후에 삽입
- around : 관심메서드 실행 전과 후에 삽입
- after-returning : 예외 없이 종료한 후 삽입
- after-Throwing : 예외 발생 시 삽입



-------------------------------------------------------------------------------------------------------

<< Execution 명시자

- pointcut을 지정할 때 사용하는 규칙
- execution (접근제한자 리턴타입 클래스이름 메서드이름(매개변수))
  1) 접근 제한자 : public만 가능(생략가능)
  2) 리턴타입 : 함수의 리턴 타입
  3) 클래스이름 : 패키지를 포함한 클래스 이름
  4) * : 모든 것을 포함하는 하나
  5) .. : 주로 매개변수에 사용되며, 개수 상관없이 모든 것을 의미