3/7일 Spring 수업 정리

* spring.io <- spring 공식 사이트 (북마크!) 

- Spring와 Spring boot의 차의점 : 
  Spring -처음부터 만드는 것 
  Spring boot -만들어진 것에 더하는 것


<< Spring에 대하여
- JAVA기반의 웹 개발 프레임워크
- 2003년 Rod Johnson이 발표 (C는 데니스 리치, Java는 제임스 고슬링 <<기본으로 알고있자)
- 프레임워크(framework) : 프로그램을 작성할 때 뼈대가 되는 골격

1. builder : 자바 소스를 실행할 수 있는 독립적인 형태로 변환하는 과정
    [ test.java ----(컴파일)----> test.class -----(런)----> test 실행 ]
   이러한 빌더를 도와주는 도구를 build 도구라고 하는데,
   여러 도구 중에서 가장 사용이 많은 것은 maven, gradle 이다.

- Java는 객체 생성을 개발자가 하지만 spring에서는 개발자가 -한 변수를 만들어줘 지시를 하면 spring이 객체를 생성한다
  이 것이 Java와의 가장 큰 차이점이다.

- spring은 객체 생성을 .xml 파일에서 한다. 실행은 .java 파일에서
  interface의 특징은 **다형성(부모의 참조변수로 자식을 가르키는 것) / 또, 추상메서드, 상수만 가능

- 일반 Java : 클래스가 변경되면 참조 변수 부분과 객체 생성부분 모두 수정해야 함
  근데, 다형성을 적용하면 '참조 변수 부분은 바뀌지 않고, 객체 생성 부분만 변한다(인터페이스 이므로)'


<< maven
1) 자바 빌드를 자동으로 해주는 도구
2) spring에서 필요한 라이브러리를 자동으로 다운받아 설치해주는 도구
  보통   1. spring + sts + maven
          2. spring boot + gradle + intellij
  조합으로 대부분 사용한다

<< spring framework의 특징
1. 메모리를 적게 사용하는 경량이며, 스프링이 자바 객체를 직접 관리

2. POJO(Plain Old Java Object : 가장 단순한 클래스) 방식의 프레임 워크
   - POJO : setter, getter 같은 클래스

3. IOC(Inversion of Control : 제어의 역전)  
   // 개발의 흐름과 객체의 제어권을 개발자가 아닌 spring이 제어하는 것 (객체 생성 예시)

4. DI(Dependency Injection : 의존성 투입) 
   // 객체 생성 시, 객체가 관리할 값을 넣어주는 것 (생성자, setter)

5. AOP(Aspect-Oriented Programming) 지원
   // 관점 지향 프로그래밍

6. myBatis, JPA, Hibernate 등의 데이터베이스 라이브러리 지원 
  // 위 3가지는 쿼리(.xml에 -> myBatis 방식)와 코드를 분리시키는 일을 한다

7. 개념을 제대로 알지 못하면 코드분석조차 하기 힘듬 (선생님 생각) 

**3, 4, 5는 spring의 대표적 특징 (+6번까지도 잘 알고 있기)
  거의 모든 책에서는 꼭 나오는 것들이니 잘 알고 있자

 
